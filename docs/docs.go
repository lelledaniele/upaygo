// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-08-13 12:37:52.159569095 +0100 BST m=+0.042334972

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "Microservice to manage payment",
        "title": "uPayment in GO",
        "contact": {},
        "license": {
            "name": "MIT"
        },
        "version": "1.0.0"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/payment_intents": {
            "post": {
                "description": "Create an unconfirmed and manual intent",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Intent"
                ],
                "summary": "Create an intent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Intent's currency",
                        "name": "currency",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Intent's amount",
                        "name": "amount",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Intent's payment source",
                        "name": "payment_source",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Intent's customer reference",
                        "name": "customer_reference",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.PaymentIntent"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.RESTError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.RESTError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.Amount": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "currency": {
                    "type": "object",
                    "$ref": "#/definitions/main.Currency"
                }
            }
        },
        "main.Currency": {
            "type": "object",
            "properties": {
                "ISO_4217": {
                    "description": "3 Char symbol - ISO 4217",
                    "type": "string"
                }
            }
        },
        "main.Customer": {
            "type": "object",
            "properties": {
                "gateway_reference": {
                    "description": "Gateway reference",
                    "type": "string"
                }
            }
        },
        "main.IntentStatus": {
            "type": "object",
            "properties": {
                "gateway_status": {
                    "type": "string"
                }
            }
        },
        "main.PaymentIntent": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "object",
                    "$ref": "#/definitions/main.Amount"
                },
                "confirmation_method": {
                    "description": "Confirmation method",
                    "type": "string"
                },
                "created_at": {
                    "description": "Create At",
                    "type": "integer"
                },
                "customer": {
                    "type": "object",
                    "$ref": "#/definitions/main.Customer"
                },
                "gateway_reference": {
                    "description": "Gateway reference",
                    "type": "string"
                },
                "intent_status": {
                    "type": "object",
                    "$ref": "#/definitions/main.IntentStatus"
                },
                "next_action": {
                    "description": "Next Action",
                    "type": "string"
                },
                "off_session": {
                    "description": "Off session",
                    "type": "boolean"
                },
                "payment_source": {
                    "type": "object",
                    "$ref": "#/definitions/main.PaymentSource"
                },
                "user_gateway_reference": {
                    "description": "User gateway reference",
                    "type": "string"
                }
            }
        },
        "main.PaymentSource": {
            "type": "object",
            "properties": {
                "gateway_reference": {
                    "description": "Gateway reference",
                    "type": "string"
                }
            }
        },
        "main.RESTError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{ Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface {}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
